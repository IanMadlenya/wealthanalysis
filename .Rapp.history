sessionid
getOptionChain<-function(sessionid=sessionid, tdSource=tdSource, stock="AAPL"){#
	xmlResult <- postForm(paste('https://apis.tdameritrade.com/apps/200/OptionChain;jsessionid=',sessionid,'?source=',tdSource, '&symbol=', stock,'quotes=true', sep=''), style='post')#
	resultsOK(xmlResult)#
	xmlList <- xmlToList(gsub("-", ".", xmlResult))#
	return(xmlList)#
	}
xmlResult <- postForm(paste('https://apis.tdameritrade.com/apps/200/OptionChain;jsessionid=',sessionid,'?source=',tdSource, '&symbol=', stock,'quotes=true', sep=''), style='post')
resultsOK(xmlResult)
xmlResult
sessionid
stock="AAPL"
xmlResult <- postForm(paste('https://apis.tdameritrade.com/apps/200/OptionChain;jsessionid=',sessionid,'?source=',tdSource, '&symbol=', stock, sep=''), style='post')
xmlResult
resultsOK(xmlResult)
xmlList <- xmlToList(gsub("-", ".", xmlResult))
xmlList
xmlResult <- postForm(paste('https://apis.tdameritrade.com/apps/200/OptionChain;jsessionid=',sessionid,'?source=',tdSource, '&symbol=', stock,'&quotes=true', sep=''), style='post')
xmlResult
resultsOK(xmlResult)
chain <- getOptionChain(sessionid, tdSource, stock)
chain <- getOptionChain(sessionid, tdSource, "AAPL")
sessionid
tdSource
getOptionChain<-function(sessionid=sessionid, tdSource=tdSource, stock="AAPL"){#
	xmlResult <- postForm(paste('https://apis.tdameritrade.com/apps/200/OptionChain;jsessionid=',sessionid,'?source=',tdSource, '&symbol=', stock,'&quotes=true', sep=''), style='post') #'quotes=true',#
	resultsOK(xmlResult)#
	xmlList <- xmlToList(gsub("-", ".", xmlResult))#
	return(xmlList)#
	}
chain <- getOptionChain(sessionid, tdSource, "AAPL")
chain
names(chain)
chain$results
chain$option.chain.results
names(chain$option.chain.result)
chain$option.chain.result$open
head(chain$option.chain.result)
length(chain$option.chain.result)
chain <- chain$option.chain.result#
	attributes(chain)
x <- data.frame(matrix(unlist(chain, recursive=F), nrow=length(chain), byrow=T))
nrow=length(chain)
nrow
chain
x <- data.frame(matrix(unlist(chain, recursive=T), nrow=length(chain), byrow=T))
chain <- chain$option.chain.result
attributes(chain)
names(chain)
length(chain)
chain
chain <- getOptionChain(sessionid, tdSource, "AAPL")
chaindf <- chain$option.chain.result#
	attributes(chaindf)
head(chain)
chaindf <- chain$option.chain.result#
	attributes(chaindf)
chain[16]
chain[[1]]
chain[[16]]
chain[16]
length(chain)
names(chain)
names(chaindf)
chaindf[16]
attributes(stocks$position)
attributes(chaindf)
x <- data.frame(matrix(unlist(chaindf), nrow=length(chaindf), byrow=T))
x <- data.frame(matrix(unlist(chaindf, recursive=F), nrow=length(chaindf), byrow=T))
x <- data.frame(matrix(unlist(chaindf, recursive=F), nrow=746, byrow=T))
names(x)
head(x)
x
head(x,100)
head(x,20)
names(chaindf)
chaindf["time"+1]
length(chaindf)
optionEndAt <- length(chaindf)
optionStartAt <- 16
chaindf <- chaindf[,optionStartAt:optionEndAt]
chaindf <- chaindf[optionStartAt:optionEndAt]
names(chaindf)
x <- data.frame(matrix(unlist(chain, recursive=F), nrow=length(chaindf), byrow=T))
x <- data.frame(matrix(unlist(chain, recursive=F), ncol=length(chaindf), byrow=T))
length(chaindf)
x <- data.frame(matrix(unlist(chain, recursive=F), ncol=length(chaindf), byrow=F))
x <- data.frame(matrix(unlist(chain, recursive=F), nrow=length(chaindf), byrow=F))
chaindf
chaindf$option.strike
names(chaindf)
attributes(chaindf)
names(chaindf[1])
names(chaindf[[1]]
)
optionList <- getOptionChain(sym, Exp)
sym <- "AAPL"
n <- getOpton(sym)
library(quantmod)
n <- getOpton(sym)
n <- getOption(sym)
n
sym
#local test #
library(shiny)#
library(quantmod)#
library(ggplot2)#
library(RCurl)
setwd("~/ShinyApps/openinterest")#
source("source/yahooInput.R")#
source("source/openIntFunctions.R")#
source("source/plotFunctions.R")#
source("source/getOptionChainPatch.R")
doDebug <<- T#
stock <- "AAPL"#
yymmdd <- "150417"#
strikes <- 16#
smoothOn <- F#
pinByStrikes <- F
lastQuote <- getQuote(stock)$Last#
openInt <- getYahooDataReformatted(stock, yymmdd)
??xmlToList
library(XML)
setwd("~/ShinyApps/openinterest")#
source("source/yahooInput.R")#
source("source/openIntFunctions.R")#
source("source/plotFunctions.R")#
source("source/getOptionChainPatch.R")#
#
doDebug <<- T#
stock <- "AAPL"#
yymmdd <- "150417"#
strikes <- 16#
smoothOn <- F#
pinByStrikes <- F
lastQuote <- getQuote(stock)$Last#
openInt <- getYahooDataReformatted(stock, yymmdd)#
goodChain <- nrow(openInt)>0#
	strikePar <- getStrikes(openInt, stock, strikes, lastQuote, smoothOn)#
	subChain <- truncChain(openInt, strikePar, smoothOn)#
	sp <- strikePar
??resultsOK
resultsOK
openInt
putInRightForm <- function(options) {#
	if (F) #
		cat("putInRightForm\n")#
	options <- cbind(rownames(options), options)#
	names(options)[1] <- "option"#
	rownames(options) <- NULL#
	return(options)#
}
getYahooDataReformattedOld <- function(stock, yymmdd) {#
	optionDate <- putInDateFormat(yymmdd)#
	if (F) cat("optionDate, yymmdd  ", optionDate, yymmdd, "\n")#
#
	optionList <- tryCatch(getOptionChain(stock, optionDate), error = function(e) optionList = NULL)#
#
	if (!is.null(optionList)) {#
		openInt <- parseOptionList(optionList)#
		return(openInt)#
		}#
}
Exp <- putInDateFormat(yymmdd)
sym <- stock
optionList <- getOptionChain(sym, Exp)
#install.packages("rjson")#
library(quantmod)#
getOptionChain.yahoo.patch <- function(Symbols, Exp, ...)#
{#
    library("XML")#
    library("rjson")#
#
    millisToDate <- function(x)#
    {#
        return (as.Date(x / 86400000, origin = "1970-01-01"))#
    }#
#
    dateToMillis <- function(x)#
    {#
        as.numeric(x) * 86400000  /1000#
    }#
#
    parse.expiry <- function(x) {#
        if(is.null(x))#
          return(NULL)#
#
        if(is.character(x))#
        {#
            x <- as.Date(x)#
        }#
#
        if(inherits(x, "Date") || inherits(x, "POSIXt"))#
          return(dateToMillis(x))#
#
         return(NULL)#
    }#
#
    getOptionChainJson <- function(sym, Exp)#
    {#
      if(missing(Exp))#
        {#
            url <- paste("http://finance.yahoo.com/q/op?s",sym,sep="=")#
            opt <- readLines(url)#
        }#
      else#
        {   #
            url <- paste("http://finance.yahoo.com/q/op?s=",sym,"&date=",parse.expiry(Exp),sep="")#
            opt <- readLines(url)#
        }#
#
        opt <- opt[grep("percentChangeRaw", opt)]#
        opt <- unlist(strsplit(opt, "<script>"))#
        json <- opt[3]#
        json <- gsub("<script>", "", json)#
        json <- gsub("</script>", "", json)#
        json <- gsub(";", "", json)#
        json <- unlist(strsplit(json, "="))[4]#
#
        j <- fromJSON(json)#
        price <- j$models$applet_model$data$optionData$quote$regularMarketPrice#
        calls <- j$models$applet_model$data$optionData$options$calls#
        puts <- j$models$applet_model$data$optionData$options$puts#
        return (list(calls=chainToDf(calls), puts=chainToDf(puts), price = price, sym = sym))#
    }#
#
    chainToDf <- function(theList)#
    {#
        x <- do.call(rbind.data.frame, theList)#
#
        rownames(x) <- x$contractSymbol#
        y <- x[,c("strike", "bid", "ask", "lastPrice", "volume", "openInterest")]#
        theNames <- c("Strike", "Bid", "Ask", "Last", "Vol", "OI")#
        names(y) <- theNames#
        for(i in theNames)#
        {#
            y[,i] <- as.numeric(as.character(y[,i]))#
        }#
#
        #y$contractSymbol <- as.character(x$contractSymbol)#
        #y$expiration <- millisToDate(as.numeric(as.character(x$expiration)) * 1000)#
#
        return(y)#
    }#
#
    getOptionChainJson(Symbols, Exp)#
}#
assignInNamespace("getOptionChain.yahoo", getOptionChain.yahoo.patch, "quantmod")
source("source/getOptionChainPatch.R")
getOptionChain
getOptionChain.yahoo
getOptionChain.Yahoo
library(quantmod)
getOptionChain
source("source/getOptionChainPatch.R")
getOptionChain
yymmdd
stock
openInt <- getYahooDataReformatted(stock, yymmdd)
getOptionChain(sym,yymmdd)
getOptionChain(sym)
getOptionChain
#local test #
library(shiny)#
library(quantmod)#
library(ggplot2)#
library(RCurl)#
#
#use command f3#
#
setwd("~/ShinyApps/openinterest")#
source("source/yahooInput.R")#
source("source/openIntFunctions.R")#
source("source/plotFunctions.R")#
source("source/getOptionChainPatch.R")
getOptionChain(sym)
#install.packages("rjson")#
#library(quantmod)#
getOptionChain.yahoo.patch <- function(Symbols, Exp, ...)#
{#
    library("XML")#
    library("rjson")#
#
    millisToDate <- function(x)#
    {#
        return (as.Date(x / 86400000, origin = "1970-01-01"))#
    }#
#
    dateToMillis <- function(x)#
    {#
        as.numeric(x) * 86400000  /1000#
    }#
#
    parse.expiry <- function(x) {#
        if(is.null(x))#
          return(NULL)#
#
        if(is.character(x))#
        {#
            x <- as.Date(x)#
        }#
#
        if(inherits(x, "Date") || inherits(x, "POSIXt"))#
          return(dateToMillis(x))#
#
         return(NULL)#
    }#
#
    getOptionChainJson <- function(sym, Exp)#
    {#
      if(missing(Exp))#
        {#
            url <- paste("http://finance.yahoo.com/q/op?s",sym,sep="=")#
            opt <- readLines(url)#
        }#
      else#
        {   #
            url <- paste("http://finance.yahoo.com/q/op?s=",sym,"&date=",parse.expiry(Exp),sep="")#
            opt <- readLines(url)#
        }#
#
        opt <- opt[grep("percentChangeRaw", opt)]#
        opt <- unlist(strsplit(opt, "<script>"))#
        json <- opt[3]#
        json <- gsub("<script>", "", json)#
        json <- gsub("</script>", "", json)#
        json <- gsub(";", "", json)#
        json <- unlist(strsplit(json, "="))[4]#
#
        j <- fromJSON(json)#
        price <- j$models$applet_model$data$optionData$quote$regularMarketPrice#
        calls <- j$models$applet_model$data$optionData$options$calls#
        puts <- j$models$applet_model$data$optionData$options$puts#
        return (list(calls=chainToDf(calls), puts=chainToDf(puts), price = price, sym = sym))#
    }#
#
    chainToDf <- function(theList)#
    {#
        x <- do.call(rbind.data.frame, theList)#
#
        rownames(x) <- x$contractSymbol#
        y <- x[,c("strike", "bid", "ask", "lastPrice", "volume", "openInterest")]#
        theNames <- c("Strike", "Bid", "Ask", "Last", "Vol", "OI")#
        names(y) <- theNames#
        for(i in theNames)#
        {#
            y[,i] <- as.numeric(as.character(y[,i]))#
        }#
#
        #y$contractSymbol <- as.character(x$contractSymbol)#
        #y$expiration <- millisToDate(as.numeric(as.character(x$expiration)) * 1000)#
#
        return(y)#
    }#
#
    getOptionChainJson(Symbols, Exp)#
}#
assignInNamespace("getOptionChain.yahoo", getOptionChain.yahoo.patch, "quantmod")
getOptionChain(sym)
help(getOptionChain)
help(getOptionChain, scr="yahoo")
getOptionChain(sym,scr="yahoo")
getOptionChain(sym,src="yahoo")
#local test #
library(shiny)#
library(quantmod)#
library(ggplot2)#
#library(RCurl)#
#
#use command f3#
#
setwd("~/ShinyApps/openinterest")#
source("source/yahooInput.R")#
source("source/openIntFunctions.R")#
source("source/plotFunctions.R")#
source("source/getOptionChainPatch.R")
getOptionChain(sym,src="yahoo")
getOptionChain(sym)
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")
runApp("openinterest")
#local test #
library(shiny)#
library(quantmod)#
library(ggplot2)
setwd("~/ShinyApps/openinterest")#
source("source/yahooInput.R")#
source("source/openIntFunctions.R")#
source("source/plotFunctions.R")#
source("source/getOptionChainPatch.R")
doDebug <<- T#
stock <- "AAPL"#
sym <- stock#
yymmdd <- "150417"#
strikes <- 16#
smoothOn <- F#
pinByStrikes <- F#
#
lastQuote <- getQuote(stock)$Last
openInt <- getYahooDataReformatted(stock, yymmdd)
openInt
runApp("openinterest")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("openinterest")
runApp("wealthanalysis")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
data(sample_matrix)#
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
sample.xts
sampleMatrix
sample_matrix
help(sample_matrix)
data(.sample.matrix)
x  <- data(sample_matrix)
x
data(sample_matrix)#
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
opcl
opcl
Op(x) <- Lag(Cl(x))
x
data(sample_matrix)#
	sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- sample.xts
Op(x) <- Lag(Cl(x))
#cef analysis #
#use abbyy finereader to get the data from the pdf.  specify the table and output.  should work ok#
rm(list=ls())#
library(shiny)#
library(quantmod)#
library(ggplot2)#
library(PerformanceAnalytics)#
require(reshape2)
Op(x) <- Lag(Cl(x))
x
sample.xts
data(sample_matrix)#
	sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- sample.xts#
	#no ah trading#
	Op(x) <- Lag(Cl(x))
x <- sample.xts
sample.xts
Op(x)
Lag(Cl(x))
Op(x) <- Lag(Cl(x))
Op(x)
Op(x) <- 1
names(x)
x$Open <- 1
sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- sample.xts#
	#no ah trading#
	x$open <- Lag(Cl(x))
x <- sample.xts#
	#no ah trading#
	x$close <- Lag(Cl(x))+ 1
x$open <- Lag(Cl(x))
x
x$Close <- Lag(Cl(x))+ 1
length(x)
x$Close <- Lag(Cl(x))
length(Lag(Cl(x)))
x <- sample.xts#
	#no ah trading#
	x$Close <- Lag(Cl(x))
x
Lag(Cl(x))
x$Close <- Lag(Cl(x)) + 1
x
??seq
x$Close <- seq_along(x)
x <- sample.xts#
	#no ah trading#
	x$Close <- seq_along(x)
seq_along(x)
length(seq_along(x))
length(x)
x$Close <- seq_along(x)
x$Close <- c(1:length(x))
c(1:length(x))
x$Close
x$Close <- 1
x$Close
c(1:length(x))
length(c(1:length(x)))
names(x)
xtx <- xts(cbind(Open=1:4, Close=11:14), order=Sys.Date() + 1:4)
xtx
x <- xts(cbind(Open=1:4, Close=11:14), order=Sys.Date() + 1:4)
Cl(x)
OpCl(x)
getTestData <- function(){#
	data(sample_matrix)#
	sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- xts(cbind(Open=1:20, Close=2:21), order=Sys.Date() + 1:4)#
	return(x)	#
}
x <- xts(cbind(Open=1:20, Close=2:21), order=Sys.Date() + 1:4)
x <- xts(cbind(Open=1:20, Close=2:21), order=Sys.Date() + 1:2o)
x <- xts(cbind(Open=1:20, Close=2:21), order=Sys.Date() + 1:2o)
x <- xts(cbind(Open=1:20, Close=2:21), order=Sys.Date() + 1:20)
x
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
dow <<- c("Mon","Tue", "Wed","Thu","Fri")
getTestData <- function(){#
	data(sample_matrix)#
	sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)#
	x <- keepDaysF(x,dow)#
	return(x)	#
}
x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)#
	x <- keepDaysF(x,dow)
keepDaysF<- function(x, keepDays){#
	if(doDebug) cat("keepDaysF\n")	#
	if (!is.null(x)) #
		xx <- x[format(index(x), "%a") %in% keepDays]#
	else#
		xx <- NULL	#
	return(xx)#
}
x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)#
	x <- keepDaysF(x,dow)
x
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
dow
x
x[format(index(x), "%a") %in% keepDays]
keepDays <- dow
x[format(index(x), "%a") %in% keepDays]
format(index(x), "%a") %in% keepDays
x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)
format(index(x), "%a") %in% keepDays
x <- keepDaysF(x,dow)
x
getTestData <- function(){#
	#data(sample_matrix)#
	#sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)#
	x <- keepDaysF(x,c("Mon","Tue", "Wed","Thu","Fri"))#
	return(x)	#
}
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
x <- xts(cbind(Open=1:40, Close=2:21), order=Sys.Date() + 1:40)#
	xx <- keepDaysF(x,c("Mon","Tue", "Wed","Thu","Fri"))
xx
x
getTestData <- function(){#
	#data(sample_matrix)#
	#sample.xts <- as.xts(sample_matrix, descr='my new xts object')#
	x <- xts(cbind(Open=1:40, Close=2:41), order=Sys.Date() + 1:40)#
	xx <- keepDaysF(x,c("Mon","Tue", "Wed","Thu","Fri"))#
	return(xx)	#
}
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
sample.xts
x
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
getTestData <- function(){#
	#data(sample_matrix)#
	#x <- as.xts(sample_matrix, descr='my new xts object')#
	x <- xts(cbind(Open=1:40, Close=2:41), order=Sys.Date() + 1:40)#
	#xx <- keepDaysF(x,c("Mon","Tue", "Wed","Thu","Fri"))#
	return(x)	#
}
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
data <- x
day <- OpCl(data)
day
data
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
library(shiny)#
library(shinyapps)#
setwd("~/shinyapps/")#
#in browser use command f3#
options(shiny.reactlog=TRUE)#
runApp("wealthanalysis")
